module Project_1.TestingScript where

import Project_1.Account.Account
import Project_1.Shop.Shop
import Daml.Script
import DA.Assert ((===))


-----------------------------------------------------------------
-----------------------------------------------------------------
-----------------------Testing Scripts---------------------------
-----------------------------------------------------------------
-----------------------------------------------------------------
test = script do
  bank      <- allocateParty "Bank"
  alice     <- allocateParty "Alice"
  shopOwner <- allocateParty "ShopOwner"

  aliceUserOfBank <- submitMulti [bank, alice] [] do
    createCmd Account with
      issuer = bank
      owner = alice
      amount = 1000.0

  debug ("aliceUserOfBank-----------> Created ðŸš€")
  
  shop <- submit shopOwner $ createCmd Shop with
    owner = shopOwner
    bank = bank
    observers = [alice]
    price = 100.0
    
  debug ("shop-----------------------> Created ðŸš€")

  -- Before we buy anything, Alice has 1000
  ((_, aliceAccount)::_) <- query @Account alice
  debug ("aliceAccount :========" <> show aliceAccount)
  aliceAccount.amount === 1000.0

  -- submit alice $ exerciseCmd shop (OrderItemTrusted alice)
  submit alice $ exerciseCmd shop (OrderItemTrusted alice)

  ((_, aliceAccount)::_) <- query @Account alice
  debug ("aliceAccount :========" <> show aliceAccount)
  aliceAccount.amount === 900.0

  iouContracts <- query @Iou bank
  debug ("bankIou :========" <> show iouContracts)
  -- bankIou === Iou with issuer = bank, owner = shopOwner, amount = 100.0

  submit alice $ exerciseCmd shop (OrderItemTrustedLimited alice)
  -- This one doesn't pass, so the balance is still 900
  ((_, aliceAccount)::_) <- query @Account alice
  aliceAccount.amount === 900.0
  -- and the newly created Iou is in Alice's name instead of her bank's
  [(_, aliceIou)] <- query @Iou alice
  [(_, bankIou)] <- query @Iou bank
  aliceIou === Iou with issuer = alice, owner = shopOwner, amount = 100.0
  bankIou === Iou with issuer = bank, owner = shopOwner, amount = 100.0

  pure ()



test2 = script do
  bank <- allocateParty "Bank"
  alice <- allocateParty "Alice"
  shopOwner <- allocateParty "ShopOwner"

  aliceAccountId <-
    submitMulti [bank, alice] [] $ createCmd Account with
      issuer = bank
      owner = alice
      amount = 1000.0

  submitMulti [alice, shopOwner] [] $
    createAndExerciseCmd
      (TestThrewTransferLimitExceeded with
        owner = alice
        newOwner = shopOwner)
      (TestThrewTransferLimitExceededChoice with
        accountId = aliceAccountId)


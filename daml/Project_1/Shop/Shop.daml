module Project_1.Shop.Shop where

import Project_1.Account.Account
import Project_1.Order.Order
import DA.Exception


template Shop 
  with 
    owner       : Party
    bank        : Party
    observers   : [Party]
    price       : Decimal
  where  
    signatory owner
    observer observers

    nonconsuming choice OrderItem : ContractId Order
      with
        shopper : Party
      controller shopper
      do exerciseByKey @Account (bank, shopper) (Transfer owner price)
         create Order
           with
             shopOwner = owner
             shopper = shopper
    
    nonconsuming choice OrderItemTrusted : ContractId Order
      with 
        shopper   : Party
      controller shopper
      do 
        cid <- create Order
          with 
            shopOwner = owner
            shopper = shopper
        try do
          exerciseByKey @Account (bank, shopper) (Transfer owner price)
        catch
          PreconditionFailed _ -> do
            create Iou with
              issuer = shopper
              owner = owner
              amount = price
            pure ()
        pure cid

    nonconsuming choice OrderItemTrustedLimited : ContractId Order
      with
        shopper   : Party
      controller shopper
      do 
      try do
        exerciseByKey @Account (bank, shopper) (TransferLimited owner price)
        pure ()
      catch
        PreconditionFailed _ -> do
          create Iou with
            issuer = shopper
            owner = owner
            amount = price
          pure()
        TransfereLimitExceeded _ _ -> do
          create Iou with
            issuer = shopper
            owner = owner
            amount = price
          pure()
      create Order
        with
          shopOwner = owner
          shopper = shopper
